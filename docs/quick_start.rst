Quick Start Guide
-----------------

Project Name
------------

This project is named *User Registration Management and schedule Events*

 - **User_API - project name**
 - virtual environment names: myenv


First you’ll need to have Django and django-registration installed;
for details on that, see the :doc:`installation_guide`

Setting up URLs
---------------

Each bundled registration workflow in django-registration includes a
Django URLconf which sets up URL patterns for the views in django-registration.
The URLconf for the two-step activation workflow can be found at
django_registration.backends.activation.urls.

For example, to place the registration URLs under the prefix /accounts/,
you could add the following to your project’s root URLconf:

from django.urls import include, path

urlpatterns = [
path('accounts/', include('django_registration.backends.activation.urls')),
path('accounts/', include('django.contrib.auth.urls')),
# More URL patterns ...
]

Users would then be able to register by visiting the URL /accounts/register/,
log in (once activated) at /accounts/login/,etc.

The sample URL configuration above also sets up the built-in auth views
included in Django (login, logout, password reset, etc.)
via the django.contrib.auth.urls URLconf.


Create App in project
---------------------
    $python manage.py startapp User_APP

Install Apps:

    In User_API settings.py,

    Installed_Apps=['',
                    '',
                    '',
                    '<App_name>'
                    ]

Write First View
-----------------

Let’s write the first view. Open the file User_APP/views.py

    **User_APP/views.py**

from django.http import HttpResponse

def index(request):
    return HttpResponse("Hello, world. Welcome to my first django Project.")


To call the view, we need to map it to a URL - and for this we need a URLconf.

To create a URLconf in the User_APP directory,
create a file called urls.py in app directory.

from django.urls import path

from . import views

urlpatterns = [
                path('', views.index, name='index'),
]


The next step is to point the root URLconf at the User_APP.urls module.
In User_API/urls.py, add an import for django.urls.include and insert an include()
in the urlpatterns list, so you have:

User_API/urls.py

from django.contrib import admin
from django.urls import include, path

urlpatterns = [
                path('app/', include('User_APP.urls')),
                path('admin/', admin.site.urls),
]

Then, i used two function based views namely,

    **home**
    **register**

def home()
    It accepts request parameter and render html values to the user.

def register()
    It accepts request parameter and get the values store in the models(Django Db)
    Then ensure the values of user ,If its valid it has to be registered.


Templates
---------

Django needs a convenient way to generate HTML dynamically.
The most common approach relies on templates.
A template contains the static parts of the desired HTML output
as well as some special syntax describing how dynamic content will be inserted.
For a hands-on example of creating HTML pages with templates.

Configuration

Templates engines are configured with the TEMPLATES setting. It’s a list of configurations, one for each engine.
The default value is empty.
The settings.py generated by the startproject command defines a more useful value:

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            # ... some options here ...
        },
    },
]



In this project i used four templates,

1.Login
    Authorized user can login with password credentials.
2.Logout
    Sign Out of the site.
3.Register
    New User can Register with Username and Email credentials.
4.Profile
    Registered Users have look their own profile.










